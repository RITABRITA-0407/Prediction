# -*- coding: utf-8 -*-
"""Prediction of house prices.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AjbOiI0c2pL0roIx5A8i0tnYdync9P0a

# Project 1: Predict House Prices (California Housing Dataset)
Goal: Predict median home prices in California using linear regression.
"""

pip install pandas scikit-learn matplotlib seaborn

import pandas as pd # Data handling
import numpy as np # Numerical operations
import matplotlib.pyplot as plt # Plotting
import seaborn as sns # Statistical plotting
from sklearn.model_selection import train_test_split # For splitting data
from sklearn.linear_model import LinearRegression # The ML model
from sklearn.metrics import mean_squared_error, r2_score # Evaluation metrics
from sklearn.datasets import fetch_california_housing # Dataset

housing = fetch_california_housing() # NOTE: In future versions of scikit-learn this may be

# Convert to pandas DataFrame
df = pd.DataFrame(housing.data, columns=housing.feature_names) # Features
df['PRICE'] = housing.target # Add the target variable (median home price)

# Display the first few rows of the dataset
print(df.head())

# View correlations between variables
plt.figure(figsize=(12, 10))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap of California Housing Data")
plt.show()

# Select feature and target
X = df[['AveRooms']] # Feature: average number of rooms
y = df['PRICE'] # Target: median home price
# Split into training and testing data
X_train, X_test, y_train, y_test = train_test_split(
X, y, test_size=0.2, random_state=42 # 80% train, 20% test
)

# Initialize and train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)
# Print the learned parameters
print("Model Coefficient (slope):", model.coef_)
print("Model Intercept (bias):", model.intercept_)

# Predict on the test data
y_pred = model.predict(X_test)
# Calculate and print evaluation metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("Mean Squared Error (MSE):", mse)
print("RÂ² Score:", r2)

# Plot the regression line and test data
plt.scatter(X_test, y_test, color='blue', label='Actual Prices') # Actual pri
plt.plot(X_test, y_pred, color='red', linewidth=2, label='Predicted Prices')
plt.xlabel('Average Number of Rooms (RM)')
plt.ylabel('Median House Price ($1000s)')
plt.title('Linear Regression: RM vs PRICE')
plt.legend()
plt.show()